<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>丹尼尔的博客</title>
  
  <subtitle>无</subtitle>
  <link href="https://trumming.github.io/atom.xml" rel="self"/>
  
  <link href="https://trumming.github.io/"/>
  <updated>2021-02-26T15:50:04.273Z</updated>
  <id>https://trumming.github.io/</id>
  
  <author>
    <name>丹尼尔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://trumming.github.io/uncategorized/%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84%E5%8C%96%E7%B3%BB%E7%BB%9F%E5%8C%96.html"/>
    <id>https://trumming.github.io/uncategorized/%E7%9F%A5%E8%AF%86%E7%BB%93%E6%9E%84%E5%8C%96%E7%B3%BB%E7%BB%9F%E5%8C%96.html</id>
    <published>2021-02-26T15:50:04.273Z</published>
    <updated>2021-02-26T15:50:04.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识树搭建"><a href="#知识树搭建" class="headerlink" title="知识树搭建"></a>知识树搭建</h1><h1 id="资源库"><a href="#资源库" class="headerlink" title="资源库"></a>资源库</h1><ul><li>学习资源</li><li>工具资源</li><li>在线工具资源<h1 id="知识固化与回顾"><a href="#知识固化与回顾" class="headerlink" title="知识固化与回顾"></a>知识固化与回顾</h1></li></ul><h1 id="代码库代码片段"><a href="#代码库代码片段" class="headerlink" title="代码库代码片段"></a>代码库代码片段</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;知识树搭建&quot;&gt;&lt;a href=&quot;#知识树搭建&quot; class=&quot;headerlink&quot; title=&quot;知识树搭建&quot;&gt;&lt;/a&gt;知识树搭建&lt;/h1&gt;&lt;h1 id=&quot;资源库&quot;&gt;&lt;a href=&quot;#资源库&quot; class=&quot;headerlink&quot; title=&quot;资源库&quot;&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Low Memory Killer In QNX</title>
    <link href="https://trumming.github.io/QNX/Low%20Memory%20Killer%20In%20QNX.html"/>
    <id>https://trumming.github.io/QNX/Low%20Memory%20Killer%20In%20QNX.html</id>
    <published>2021-01-31T10:00:00.000Z</published>
    <updated>2021-01-31T15:50:03.555Z</updated>
    
    <content type="html"><![CDATA[<p>QNX系统下的Low Memory Killer，当内存极度低时，采取一定的措施将内存消耗的大户，做重启动作，防止整个系统不能工作；</p><a id="more"></a><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devctl( fd, DCMD_PROC_SYSINFO, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;totalsize );</span><br><span class="line"></span><br><span class="line">buffer = <span class="built_in">malloc</span>( totalsize );</span><br><span class="line">devctl( fd, DCMD_PROC_SYSINFO, buffer, totalsize, <span class="literal">NULL</span> );</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">proc_info</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> mem_usage;</span><br><span class="line">&#125;tProcInfo;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;tProcInfo&gt; qnx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Comp</span><span class="params">(<span class="keyword">const</span> tProcInfo &amp;a,<span class="keyword">const</span> tProcInfo &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.mem_usage &lt; b.mem_usage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    tProcInfo qconn=&#123;<span class="number">1556</span>,<span class="built_in">string</span>(<span class="string">&quot;qconn&quot;</span>),<span class="number">1024</span>&#125;;</span><br><span class="line">    tProcInfo audio=&#123;<span class="number">1550</span>,<span class="built_in">string</span>(<span class="string">&quot;audio&quot;</span>),<span class="number">4024</span>&#125;;</span><br><span class="line">    tProcInfo cluster=&#123;<span class="number">1559</span>,<span class="built_in">string</span>(<span class="string">&quot;cluster&quot;</span>),<span class="number">2024</span>&#125;;</span><br><span class="line"></span><br><span class="line">    qnx.push_back(qconn);</span><br><span class="line">    qnx.push_back(audio);</span><br><span class="line">    qnx.push_back(cluster);</span><br><span class="line">    <span class="built_in">vector</span>&lt;tProcInfo&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it=qnx.begin();it!=qnx.end();it++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; it-&gt;name &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sort(qnx.begin(),qnx.end(),Comp);</span><br><span class="line">    <span class="keyword">for</span>(it=qnx.begin();it!=qnx.end();it++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; it-&gt;name &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ProcInfo.h: interface for the CProcInfo class.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(AFX_PROCINFO_H__E3782DFC_59DE_45FC_BF1F_D8C8BF0181C1__INCLUDED_)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AFX_PROCINFO_H__E3782DFC_59DE_45FC_BF1F_D8C8BF0181C1__INCLUDED_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER &gt; 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _MSC_VER &gt; 1000</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CProcInfo</span>  </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CProcInfo();</span><br><span class="line">    <span class="keyword">virtual</span> ~CProcInfo();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitSysInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClearSysInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetFreeMem</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetTotalMem</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetFreeMemPercent</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetSysInfo</span><span class="params">(<span class="keyword">int</span> &amp;TotalMem,<span class="keyword">int</span> &amp;CpuSpeed,<span class="keyword">int</span> &amp;BootTime,<span class="keyword">char</span> *pszCpuName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetDiskInfo</span><span class="params">(<span class="keyword">int</span> &amp;Total,<span class="keyword">int</span> &amp;Free)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span>  <span class="title">GetFreeDiskPercent</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">normalize_data_size</span><span class="params">(<span class="keyword">int</span> &amp;size)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">GetProcName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iPid,<span class="keyword">char</span> *pszProcName,<span class="keyword">int</span> &amp;fd)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">GetSingleProcInfo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> fd,<span class="keyword">long</span> &amp;StartTsp,<span class="keyword">int</span> &amp;CpuTime,<span class="keyword">int</span> &amp;MemSize)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_iTotalMem;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_iCpuSpeed;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_iBootTime;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> s_strCpuName[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_hSysProc;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_hRootFile;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !defined(AFX_PROCINFO_H__E3782DFC_59DE_45FC_BF1F_D8C8BF0181C1__INCLUDED_)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ProcInfo.cpp: implementation of the CProcInfo class.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/iofunc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/dispatch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/neutrino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/procfs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ProcInfo.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libgen.h&gt;</span></span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Construction/Destruction</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span> CProcInfo::s_iTotalMem;</span><br><span class="line"><span class="keyword">int</span> CProcInfo::s_iCpuSpeed;</span><br><span class="line"><span class="keyword">int</span> CProcInfo::s_iBootTime;</span><br><span class="line">char CProcInfo::s_strCpuName[32]=&#123;&#x27;/0&#x27;&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> CProcInfo::s_hSysProc=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> CProcInfo::s_hRootFile=<span class="number">-1</span>;</span><br><span class="line">CProcInfo::CProcInfo()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">CProcInfo::~CProcInfo()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CProcInfo::InitSysInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>                    buffer[<span class="number">50</span>];</span><br><span class="line">    procfs_sysinfo          *sysinfo;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cpuinfo_entry</span>    *<span class="title">cpu</span>;</span></span><br><span class="line">    <span class="keyword">int</span>                     i;</span><br><span class="line">    <span class="built_in">sprintf</span>(buffer, <span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((s_hSysProc = open(buffer, O_RDONLY)) == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;couldn&#x27;t open %s: %s/n&quot;</span>, buffer, strerror(errno));</span><br><span class="line">    sysinfo = (procfs_sysinfo *)buffer;</span><br><span class="line">    <span class="keyword">if</span> (devctl(s_hSysProc, DCMD_PROC_SYSINFO, sysinfo, <span class="keyword">sizeof</span> buffer, <span class="number">0</span>) != EOK)</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;couldn&#x27;t get info for %s: %s/n&quot;</span>, buffer, strerror(errno));</span><br><span class="line">    i = sysinfo-&gt;total_size;</span><br><span class="line">    <span class="keyword">if</span>(!(sysinfo = (procfs_sysinfo *)alloca(i)))</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;couldn&#x27;t get memory for %s: %s/n&quot;</span>, buffer, strerror(errno));</span><br><span class="line">    <span class="keyword">if</span> (devctl(s_hSysProc, DCMD_PROC_SYSINFO, sysinfo, i, <span class="number">0</span>) != EOK)</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;couldn&#x27;t get info for %s: %s/n&quot;</span>, buffer, strerror(errno));</span><br><span class="line">    s_iTotalMem = _SYSPAGE_ENTRY(sysinfo, system_private)-&gt;ramsize;</span><br><span class="line">    s_iBootTime = _SYSPAGE_ENTRY(sysinfo, qtime)-&gt;boot_time;</span><br><span class="line">    cpu = _SYSPAGE_ENTRY(sysinfo, cpuinfo);</span><br><span class="line"><span class="comment">//  printf(&quot;%s &quot;, &amp;_SYSPAGE_ENTRY(sysinfo, strings)-&gt;data[cpu-&gt;name]); //实际name</span></span><br><span class="line">    <span class="built_in">strcpy</span>(s_strCpuName,<span class="string">&quot;Cyrix X86&quot;</span>);</span><br><span class="line">    s_iCpuSpeed=cpu-&gt;speed;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CProcInfo::ClearSysInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    close(s_hSysProc);</span><br><span class="line">    s_hSysProc=<span class="number">-1</span>;</span><br><span class="line">    close(s_hRootFile);</span><br><span class="line">    s_hRootFile=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CProcInfo::GetSysInfo</span><span class="params">(<span class="keyword">int</span> &amp;TotalMem,<span class="keyword">int</span> &amp;CpuSpeed,<span class="keyword">int</span> &amp;BootTime,<span class="keyword">char</span> *pszCpuName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TotalMem=s_iTotalMem;</span><br><span class="line">    CpuSpeed=s_iCpuSpeed;</span><br><span class="line">    BootTime=s_iBootTime;</span><br><span class="line">    <span class="keyword">if</span> (pszCpuName)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(pszCpuName,s_strCpuName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CProcInfo::GetFreeMem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s_hSysProc==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s_hSysProc=open(<span class="string">&quot;/proc&quot;</span>, O_RDONLY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span>             <span class="title">st</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (fstat(s_hSysProc, &amp;st) == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;couldn&#x27;t get stat info for %s: %s/n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> st.st_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CProcInfo::GetTotalMem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s_iTotalMem;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CProcInfo::GetFreeMemPercent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> freemem=GetFreeMem();</span><br><span class="line">    <span class="keyword">return</span> ( (<span class="keyword">int</span>)( freemem*<span class="number">100.0</span>/s_iTotalMem ) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CProcInfo::GetFreeDiskPercent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iTotal,iFree;</span><br><span class="line">    GetDiskInfo(iTotal,iFree);</span><br><span class="line">    <span class="keyword">return</span> ( (<span class="keyword">int</span>)( iFree*<span class="number">100.0</span>/iTotal ) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CProcInfo::normalize_data_size</span><span class="params">(<span class="keyword">int</span> &amp;size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> sym = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">8192</span>) &#123;</span><br><span class="line">        size /= <span class="number">1024</span>;</span><br><span class="line">        sym = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">8192</span>) &#123;</span><br><span class="line">            size /= <span class="number">1024</span>;</span><br><span class="line">            sym = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">8192</span>) &#123;</span><br><span class="line">            size /= <span class="number">1024</span>;</span><br><span class="line">            sym = <span class="string">&#x27;G&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">8192</span>) &#123;</span><br><span class="line">            size /= <span class="number">1024</span>;</span><br><span class="line">            sym = <span class="string">&#x27;T&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sym;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CProcInfo::GetDiskInfo</span><span class="params">(<span class="keyword">int</span> &amp;Total,<span class="keyword">int</span> &amp;Free)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span>==s_hRootFile)</span><br><span class="line">    &#123;</span><br><span class="line">        s_hRootFile = open(<span class="string">&quot;/&quot;</span>,O_RDONLY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span>==s_hRootFile)</span><br><span class="line">    &#123;</span><br><span class="line">        Total=<span class="number">-1</span>;</span><br><span class="line">        Free=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">statvfs</span> <span class="title">FileBuff</span>;</span></span><br><span class="line">    <span class="keyword">int</span> tmpret=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span>==(tmpret=fstatvfs(s_hRootFile,&amp;FileBuff)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fstatvfs ret=%d/n&quot;</span>,tmpret);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fstatvfs is:%s/n&quot;</span>,strerror(tmpret)); </span><br><span class="line">        close(s_hRootFile);</span><br><span class="line">        Total=<span class="number">-1</span>;</span><br><span class="line">        Free=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//  printf(&quot;f_blocks=%d,bfree=%d,f_bsize=%ld/n&quot;,FileBuff.f_blocks,FileBuff.f_bfree,FileBuff.f_bsize);</span></span><br><span class="line"><span class="comment">//  printf(&quot;DT=%ld,DF=%ld/n&quot;,FileBuff.f_blocks*FileBuff.f_bsize,FileBuff.f_bfree*FileBuff.f_bsize);</span></span><br><span class="line">    Total=FileBuff.f_blocks*FileBuff.f_bsize;</span><br><span class="line">    Free=FileBuff.f_bfree*FileBuff.f_bsize; </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CProcInfo::GetProcName</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> iPid,<span class="keyword">char</span> *pszProcName,<span class="keyword">int</span> &amp;fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pszProcName)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>            buf[PATH_MAX + <span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dinfo_s</span> &#123;</span></span><br><span class="line">        procfs_debuginfo    info;</span><br><span class="line">        <span class="keyword">char</span>                pathbuffer[PATH_MAX]; <span class="comment">/* 1st byte is info.path[0] */</span></span><br><span class="line">    &#125;dinfo;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/as&quot;</span>, iPid);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((fd = open(buf, O_RDONLY|O_NONBLOCK)) == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (devctl(fd, DCMD_PROC_MAPDEBUG_BASE, &amp;dinfo, <span class="keyword">sizeof</span>(dinfo), <span class="literal">NULL</span>) != EOK) &#123;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(pszProcName,basename(dinfo.info.path));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//StartTsp:单位:秒</span></span><br><span class="line"><span class="comment">//CpuTime:单位:毫秒</span></span><br><span class="line"><span class="comment">//MemSize:单位:字节</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CProcInfo::GetSingleProcInfo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> fd,<span class="keyword">long</span> &amp;StartTsp,<span class="keyword">int</span> &amp;CpuTime,<span class="keyword">int</span> &amp;MemSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    procfs_info     infos;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span>==fd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">if</span> (devctl(fd, DCMD_PROC_INFO, &amp;infos, <span class="keyword">sizeof</span> infos, <span class="number">0</span>) != EOK) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    StartTsp=infos.start_time/<span class="number">1000000000</span>;       </span><br><span class="line">    CpuTime=(infos.stime + infos.utime)/<span class="number">1000000</span>;</span><br><span class="line">    <span class="comment">//MemSize</span></span><br><span class="line">    MemSize=<span class="number">0</span>;<span class="comment">//</span></span><br><span class="line">    procfs_mapinfo      *mapinfos = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>      num_mapinfos = <span class="number">0</span>;</span><br><span class="line">    procfs_mapinfo      *mapinfo_p;</span><br><span class="line">    <span class="keyword">int</span>             flags = ~<span class="number">0</span>, err, num, i;</span><br><span class="line">    <span class="comment">// Get the number of map entrys</span></span><br><span class="line">    <span class="keyword">if</span>((err = devctl(fd, DCMD_PROC_MAPINFO, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;num )) != EOK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed devctl num mapinfos - %d (%s)/n&quot;</span>, err, strerror(err));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// malloc enough memory for all of them</span></span><br><span class="line">    <span class="keyword">if</span> ( (mapinfos = (procfs_mapinfo*)<span class="built_in">malloc</span>( num*<span class="keyword">sizeof</span>(procfs_mapinfo) )) == <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed malloc - %d (%s)/n&quot;</span>, err, strerror(err));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num_mapinfos = num;</span><br><span class="line">    mapinfo_p = mapinfos;</span><br><span class="line">    <span class="comment">// fill the map entrys  </span></span><br><span class="line">    <span class="keyword">if</span>((err = devctl(fd, DCMD_PROC_MAPINFO, mapinfo_p, num*<span class="keyword">sizeof</span>(procfs_mapinfo), &amp;num)) != EOK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;failed devctl mapinfos - %d (%s)/n&quot;</span>, err, strerror(err));</span><br><span class="line">        <span class="built_in">free</span>(mapinfos);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num&gt;num_mapinfos)</span><br><span class="line">    &#123;</span><br><span class="line">        num=num_mapinfos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Run through the list of mapinfo&#x27;s, and store the data and text info</span></span><br><span class="line">    <span class="comment">// so we can print it at the bottom of the loop.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">for</span> ( mapinfo_p = mapinfos, i = <span class="number">0</span>; i &lt; num; i++, mapinfo_p++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !(mapinfo_p-&gt;flags &amp; flags) )</span><br><span class="line">            mapinfo_p-&gt;ino = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( mapinfo_p-&gt;ino == <span class="number">0</span> ) <span class="comment">/* already visited */</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        MemSize+=mapinfo_p-&gt;size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(mapinfos);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CpuUsed.h: interface for the CCpuUsed class.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(AFX_CPUUSED_H__DA812B5A_099E_43F0_9C27_E84A9F0A8E78__INCLUDED_)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AFX_CPUUSED_H__DA812B5A_099E_43F0_9C27_E84A9F0A8E78__INCLUDED_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> _MSC_VER &gt; 1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// _MSC_VER &gt; 1000</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;QnxHardTimer.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCpuUsed</span> :</span> <span class="keyword">public</span> CQnxHardTimer  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CCpuUsed();</span><br><span class="line">    <span class="keyword">virtual</span> ~CCpuUsed();</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span>  <span class="title">RepeatTimerThread</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetCpuUsed</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> CCpuUsed s_CpuUsed;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> m_iCpuUsed;</span><br><span class="line">    <span class="keyword">clockid_t</span> m_iClockID;</span><br><span class="line">    <span class="keyword">uint64_t</span>  m_ut_old;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">m_tt_old</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !defined(AFX_CPUUSED_H__DA812B5A_099E_43F0_9C27_E84A9F0A8E78__INCLUDED_)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CpuUsed.cpp: implementation of the CCpuUsed class.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CpuUsed.h&quot;</span></span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Construction/Destruction</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">CCpuUsed CCpuUsed::s_CpuUsed;</span><br><span class="line">CCpuUsed::CCpuUsed()</span><br><span class="line">&#123;</span><br><span class="line">    m_iClockID=ClockId(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">//取空闲线程;</span></span><br><span class="line">    m_ut_old=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">CCpuUsed::~CCpuUsed()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">CCpuUsed::RepeatTimerThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span>  ut_now=<span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">tt_now</span>;</span></span><br><span class="line">    <span class="keyword">uint64_t</span>  ut_sub; <span class="comment">//时间差</span></span><br><span class="line">    <span class="keyword">uint64_t</span>  ut_tmp; </span><br><span class="line">    ClockTime(m_iClockID, <span class="literal">NULL</span>, &amp;ut_now);</span><br><span class="line">    clock_gettime( CLOCK_REALTIME, &amp;tt_now);</span><br><span class="line">    ut_tmp=tt_now.tv_sec-m_tt_old.tv_sec;</span><br><span class="line">    ut_sub=ut_tmp*<span class="number">1000000000</span>+tt_now.tv_nsec-m_tt_old.tv_nsec;</span><br><span class="line">    m_iCpuUsed=(<span class="keyword">int</span>)( ((<span class="keyword">float</span>)(ut_sub-(ut_now-m_ut_old))/(<span class="keyword">float</span>)ut_sub)*<span class="number">100</span> );</span><br><span class="line">    m_ut_old=ut_now;</span><br><span class="line">    m_tt_old=tt_now;</span><br><span class="line"><span class="comment">//  printf(&quot;m_iCpuUsed=%d%%/n&quot;,m_iCpuUsed);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CCpuUsed::GetCpuUsed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_iCpuUsed&gt;<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (m_iCpuUsed&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> m_iCpuUsed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.qnx.com/developers/docs/7.0.0/index.html#com.qnx.doc.neutrino.prog/topic/process_DCMD_PROC_SYSINFO.html">QNX:DCMD_PROC_SYSINFO</a></p><p><a href="https://blog.csdn.net/Delores/article/details/3127978">QNX下获取系统信息的方法（cpu，内存，进程等等）</a></p><p><a href="http://cpp.jsrun.net/">C++在线环境</a></p><p><a href="https://www.w3cschool.cn/cpp/cpp-i6da2pq0.html">C++ Vector详解</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;QNX系统下的Low Memory Killer，当内存极度低时，采取一定的措施将内存消耗的大户，做重启动作，防止整个系统不能工作；&lt;/p&gt;</summary>
    
    
    
    <category term="QNX" scheme="https://trumming.github.io/categories/QNX/"/>
    
    
  </entry>
  
  <entry>
    <title>蔡志忠《努力是没有用的》演讲</title>
    <link href="https://trumming.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-c/%E8%94%A1%E5%BF%97%E5%BF%A0%E3%80%8A%E5%8A%AA%E5%8A%9B%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8%E7%9A%84%E3%80%8B%E6%BC%94%E8%AE%B2.html"/>
    <id>https://trumming.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-c/%E8%94%A1%E5%BF%97%E5%BF%A0%E3%80%8A%E5%8A%AA%E5%8A%9B%E6%98%AF%E6%B2%A1%E6%9C%89%E7%94%A8%E7%9A%84%E3%80%8B%E6%BC%94%E8%AE%B2.html</id>
    <published>2021-01-30T10:00:00.000Z</published>
    <updated>2021-02-14T15:50:03.794Z</updated>
    
    <content type="html"><![CDATA[<p>人生不是走斜坡，你持续走就可以走到巅峰；人生像走阶梯，每一阶有每一阶的难点，学物理有物理的难点，学漫画有漫画的难点，你没有克服难点，再怎么努力都是原地跳。所以当你克服难点，你跳上去就不会下来了。就像你学会语文，即使你十年不讲，碰到状况就会讲；就像学脚踏车，十年没骑，碰到脚踏车一上去就可以上手一样。</p><a id="more"></a><p>大家好，我老婆说我站着躺着都不厉害，我坐着很厉害，所以我要坐着演讲。</p><p>美国有一个化学教授得了诺贝尔奖，《纽约时报》找不到他的照片，就派了一个摄影记者去学校找给他拍照片。他问为什么要替我拍照片？“因为你得了化学诺贝尔，很伟大。”“我伟大不是我的脸蛋，而是我的屁股，因为我可以一天工作十五个钟头就做化学实验，所以请拍我的屁股吧。”</p><p>我自己也是屁股最厉害，我脸蛋长得并不怎么样。我曾经坐在椅子上58个钟头做一个4分钟的电视片头；我曾经42天没有打开门，关在屋子里面做一件事；我曾经花了4年时间，到日本画了40本诸子百家跟四格漫画；我曾经花十年零四十天研究物理、数学。</p><p>我平常是坐在那根棒棒上，所以我的屁股从头到尾有一道疤痕，开始会红肿，后来就结痂，现在是完全没有问题。我可以持续用电脑工作18个钟头，不过椅子的工学位置要对：椅子45公分，桌子70公分，手放在桌子上，唯一会动的就是手指头。所以我虽然每天工作16-18个钟头，却没有手臂酸肩膀酸脖子痛。我一生没有生过病，没去过医院，死掉以前都不会去。</p><h1 id="我的童年"><a href="#我的童年" class="headerlink" title="我的童年"></a>我的童年</h1><p>去年5月5号，中信出版社要出我的书，它想出的是我的一生。然后我就开始回想我的一生。后来发现我是早期教育养大的，因为我一岁就念《圣经》，三岁半开始思考，四岁半找到人生之路。<br>为什么会有这么好的机缘？彰化田中有一个裁缝师，叫叶举。他做了一辈子裁缝师想改行当天主教的传道士，人民教堂的柯神父说如果你可以传十户人家信天主教，我就让你当传道士。他不好意思在村庄里面传道，因为很害羞，所以就跑到二十公里外的三家春——我们的家乡传道。我爸爸跟他是好朋友，大概也是这个因缘他才到我们村庄传教的。</p><p>以前信仰天主教，一般会说天主教不拜祖先，死了没人哭。天主教也会送米粉、面粉、牛油还有玉米粉给教友，所以大家会笑说天主教是“面粉教”。他大概待了半年，没几天就到我们家跟我爸爸说哪一户答应了哪一户答应了，我爸爸最后就说，好吧，那我们家就算第十户。</p><p>在我出生那一年，在彰化很多地方都没有教堂的时代，我们的小村庄竟然有一座新盖的教堂。我出生就是天主教教徒，一岁就开始念《圣经》——当然不是我自己念。十户人家，大概二十五个小孩，就像那个画面那样，最旁边那个是我。<br>我二哥6岁，我1岁，每天早上9点上到中午12点，从创世纪讲到耶稣复活。我三岁半已经会背诵《天主经》《圣母经》等很多种经文，也会参加教堂的仪轨，就是望弥撒、领圣体、办告解。</p><p>三岁半的我就开始思考，我什么都不会。《圣经》里面有100到1000个故事，有50到100个厉害的人物，例如耶稣基督有超能力，可以让瘸子走路、可以让瞎子睁眼，可以用两条鱼、五张饼喂饱了三千个信徒；摩西可以分开红海，诺亚可以制造方舟，而蔡志忠什么都不会。</p><p>蔡志忠什么都不会，看起来好像不太奇怪，事实上在我们乡下是很奇怪的。我们乡下没有三岁半的小孩不知道他将来要做什么。农夫的小孩已经可以在田里帮忙，铁匠的小孩已经在帮忙拉风，拉车的小孩已经在帮爸爸喂牛，三岁半的小姐姐已经背了一个一岁半的小妹妹，只有蔡志忠什么都不知道。因为我爸爸是全乡书法第一，他是乡民代表会秘书，我不能说我长大一定要做乡民代表会秘书，所以就很焦虑。</p><p>所以我就会躲在我爸爸的书桌下，那里有一块垫子，然后再把椅子拉进来。像乡下用九重葛立篱笆，把九重葛剥开里面像火车的车厢，是空的，所以我会整理一块地方当我的别墅，在里面思考。</p><p>思考了大概半年，记得大概四岁的时候，爸爸送给我一个小黑板。他教我学字，第一个写我的名字，然后写天地行、孔乙己，类似这样的。所以我四岁半就开始会写字会看书，也从这个小黑板发现了我的人生之路。</p><h1 id="我怎么立志画画的"><a href="#我怎么立志画画的" class="headerlink" title="我怎么立志画画的"></a>我怎么立志画画的</h1><p>我很爱画，也很会画，只要不饿死我就要画上一辈子。其实要饿死我还蛮难的，我已经四十五年不吃早餐，现在大概一天都只吃一餐，而且我的一餐是很少的，例如一碗清粥，米粒很少，平常还会配一块豆腐乳。如果今天豪华一点，就配两块豆腐乳，一块放到碗里面，一块在上面。<br>我立志一辈子要走画画这条路，可是当时并没有这条路，当时最接近画画的就是画电影招牌。因为画平常的招牌只是写字，我又不会写那种美术字，所以四岁半的我就立志要画电影招牌。<br>我大概四五岁就可以自己搭车去都市里面，其实以前没有绑架小孩，车子也很少，所以父母也不会担心你被车子撞到了、被绑架，所以我会去每个城市。<br>我去彰化市、云林市这些专门画电影招牌的地方，站着看他们画。画一张大概四平方米的，就是六尺乘六尺，我问他多少钱，他说六十块。我算了算，一个电影招牌大概要画十八片，十八片乘以六十块，大概一千块。我那时候觉得他们很厉害，一个鼻子只是画一点白点然后绕一圈，远远看过去就会反光，所以以前画电影招牌的就是我的偶像。</p><p>九岁的时候，台湾流行漫画，当时的漫画都是原创的，我那时候就立志要当漫画家。当开始决定画漫画以后，我知道我跟其他漫画家不太一样，我知道漫画最主要的是内容，内容才是王道。其实你们看我画的漫画，我大部分只花1%的时间去画，其他99%都是在编故事。无论画庄子、老子，或后来的物理、数学，都是花99%的时间去了解故事内容，所以我很喜欢编故事。<br>我会讲故事给我妈妈听，她一边喂鸡我一边讲，她一边喂鸭我一边讲，她喂猪我一边讲。我说你都没有注意听，她说有啊有啊，我有听。我说那你讲一遍我讲的什么。她说好啦好啦，我会仔细听，你再仔细讲。</p><p>我们家跟一般的中国家庭好像不太一样，可能是我们那个村庄都是这个样子。我们家没有问句，就是你生而为子，出生了就是家庭的一份子。比如一年到头最多就是中秋节有人送一盒月饼，每一次回到家我就去看书柜里有没有月饼。终于有一天有一盒月饼，我一定先吃两个，第二天要上学，我又带了两个走，下课回来再把最后两个吃掉。这样十几年，从来没有人问我这个月饼是你吃的吗？就像我要去彰化看电影，可能是五岁，就是告诉爸爸我要去彰化看电影，不是问可不可以。我的任务就是坐白天的最后一班车回来，因为天黑以前要回来。</p><p>像我们平常都在外面玩，我妈妈煮完饭就会站在晒谷场边上说回家吃饭喽，我还在玩。到了三点，人家说哎呦你糟糕了，你妈妈半个钟头前就叫你吃饭了，你还在那里玩。我说哦，再继续玩。玩到十字路口，别人又说你糟糕了，你妈妈一个钟头前就叫你回家吃饭，你还在玩。我说哦，又玩。玩到隔壁家，他说哇，你糟糕了，你妈妈一个半钟头前叫你吃饭，你还在玩。我说哦。我回到家就是把竹笼的罩子打开，吃完再把罩子盖好就好了，从来没有被骂过。</p><p>我一生没有被父亲或母亲骂过一次、打过一次。最右边那个小男生就是九岁的我，我那时候为了要站得太正头就歪了。左下角那个是我大哥，他们是很优雅的，他们在高雄的电信局。五六十年前，电信局是最高端的职业，是要打摩尔斯码的。</p><h1 id="我怎么用漫画赚钱？"><a href="#我怎么用漫画赚钱？" class="headerlink" title="我怎么用漫画赚钱？"></a>我怎么用漫画赚钱？</h1><p>我初中二年级的时候就画了四页漫画寄给台北的集英出版社。出版社不晓得我几岁，就说你画得很好，我们请你当漫画家。接到信的那天下午，我就跟妈妈说：“妈妈，明天我要坐早班车到台北了。”意思是永远不回来了。她说你要跟爸爸讲一声。我平常很少跟我爸爸讲话，我一辈子只有跟妈妈讲了无数的话，我跟我爸爸、大哥、二哥，跟我姐姐、妹妹一辈子讲的话不超过五十句。我还跟我二哥两个人同住一个房间一张床，好像三年中没有讲话，因为那时候我看不起他，我觉得他没什么文化，我虽然小他五岁。</p><p>那天晚上我爸爸吃完饭，坐在藤椅上看报纸。我就站在他后面，说爸爸明天我要去台北。他说去干吗，我说去画漫画。找到工作了吗，我说找到了，他说那就去吧。一共27个字，我讲14个字，他讲13个字，讲完了我没有走到他前面，他也没有回头看我。</p><p>第二天早班车，他好像去田里，我就拎着皮箱先坐公车到彰化，然后搭平快的。他给我两百块，搭平快的32块，到了台北又花了三块半坐三轮车——我说的是台币，其实就是带了40块人民币。<br>坐火车的时候，我就走到最后一节，看着铁轨往后面跑。我对着故乡说永远不回来了，再也不回来了。我肩不能挑、手不能提，做不了农夫，我爸爸妈妈以前都说我以后只能去路上捡牛粪——以前乡下有这个职务，断了手的或是跛脚的，他带着一个竹笼，沿路去找牛粪，已经干了的可以卖钱。</p><p>到台北，那个老板才发现原来我这么小，大概没有比皮箱高多少。睡的地方很糟糕，一个大概四平方米的屋子，里面有两张床，两层的，睡了四个人。第二天早上，我通常是大概四五点就起床了。从以前在乡下的鸟叫声公鸡叫声狗叫声，突然变成卡车发动的声音和喇叭声，我突然发现，哇，我现在已经是职业漫画家了，就非常高兴。</p><p>所以我就从15岁画到20岁，从一张八毛钱画到一张一块半。当时画漫画的时候必须要非常快，一个月要画456张。我们每一本是152张，这样才刚刚好可以在台北过得还不错，可以去看电影，可以做衣服，可以买唱片，所以我就训练画得非常快非常快。<br>今天的漫画家听说一个月画不到三十张，以前我们是两天就要画超过三十张，因为那个赚钱不够活，其实也是今天的漫画家没有办法维持很长远的原因。很多漫画家误以为他会画漫画就是漫画家，其实还是差得很远。因为漫画家毕竟是一个创作者，所以内容、故事才是主要的，而不是画画技巧。<br>通常我的一生都是自己想，就像我们打开门走出去是知道要去哪里，我们开车上高速公路是知道目的地，然而人生这么大的旅程，居然99.99%的人都不晓得他要去哪里。我四岁半就决定一生，到今天并没有改变。</p><p>我到今天一天的花费都很少超过三十块人民币，其中要花十块去买一包香烟，这个不是故意展开的。我拿着破包包，穿着破鞋，还穿着带补丁的裤子，我很多衣服都是破了还在穿着——当一个人找到了自己的最爱，其他都不在乎。</p><p>三十五年前我在日本。我是台湾人，同样的日语也不够溜，那为什么日本出版社愿意出我的书，一定是不肯的。所以第一个就是思考：我要画什么东西可以非常畅销，我要画什么东西日本漫画家画不了，所以就决定画诸子百家。</p><p>其实我刚开始打稿打了八十几张就找讲谈社的阿久津先生给他看，他说哇，这个肯定很畅销。我说当然了，我也知道。他说这个会卖疯了，这一本书一定要给我们讲谈社出版。我就说，对不起，不是一本，是三十本。他说这三十本一定要给我们讲谈社出版。我说行。所以一开始就是要想通，你在画的时候就知道一定很畅销。</p><h1 id="努力是没有用的"><a href="#努力是没有用的" class="headerlink" title="努力是没有用的"></a>努力是没有用的</h1><p>其实我的人生观，可以教你们一点——我已经68岁，很有资格教你们一点。我觉得努力是没有用的，小学三年级我就知道不能跟老师学，跟老师学没有活路。就像前天我告诉两个美院的学生，我说你怎么可以跟永远卖不了画的老师学如何去画画呢，办不到嘛。</p><p>像我的小学老师叫李再兴，他就说学问啊，就是平常要学，不懂要问，如果课堂上的问题不懂上课问，生活上的问题不懂下课问。我们乡下不怕老师的，老师一下课，就有人问老师老师，为什么玩水玩久了每个手指头都很皱，而且大拇指最皱。李再兴老师说，老师明天告诉你——很明显他家里的资料很少，都经不起你问。有时候问老师老师，为什么筷子插在水杯会转弯，他说这是折射。我说老师为什么会折射，他说因为光在空气中比较快，在水中比较慢。我说老师光在空气中为什么比较快。他说老师明天告诉你。</p><p>有一天我从教室走出来，李再兴老师从教室休息室走出来，看到我他马上闪进保健室，因为他欠我23个问题没有回答，包括手为什么会皱——玩水以后皮肤表面会增大，大拇指表面积最大，所以皱得最厉害——那个他也没有告诉我。所以那时候我就知道，不能跟老师学，老师什么都不会。所以我从来都是自己的问题自己找答案，所有的东西都自己学。<br>为什么努力是没有用的？老师或父母老是说努力努力就会走到巅峰——才怪。如果这样，不是所有人都走上巅峰了吗？没有人开始不努力，为什么后来不努力，因为努力没有效果。人生不是走斜坡，你持续走就可以走到巅峰；人生像走阶梯，每一阶有每一阶的难点，学物理有物理的难点，学漫画有漫画的难点，你没有克服难点，再怎么努力都是原地跳。所以当你克服难点，你跳上去就不会下来了。就像你学会语文，即使你十年不讲，碰到状况就会讲；就像学脚踏车，十年没骑，碰到脚踏车一上去就可以上手一样。</p><h1 id="人生其实很简单"><a href="#人生其实很简单" class="headerlink" title="人生其实很简单"></a>人生其实很简单</h1><p>改变观念听起来好像很容易，其实是不太容易的。像我第一次到香港，知道水果之王榴莲，然后就买了一颗，57块港币。回到朋友的别墅，打开就像婴儿大便，味道也像，形状也像，怎么也吃不下，就把它放到了冷冻库。7天以后就要回去，想想那么贵，再拿出来看，再怎么看都是大便，还是拿去外面丢了。</p><p>有一次我去马来西亚，要走的前一天，我看到街道上有一个人挑着一担榴莲，有两个人蹲在那里吃。我就给他马币，他给我一个榴莲，我觉得非常好吃。我在飞机上就恨自己为什么不吃两个。所以后来我去巴厘岛都是去吃榴莲的。<br>同样都是榴莲，只是我的观念改变了，就像老外永远不敢吃皮蛋，永远不敢吃臭豆腐。所以观念改变看起来好像很简单，其实有点难。就像你们后来会觉得老师、文凭不重要，但这个对大部分的妈妈们好像很难改变。对我来说，我只念到初中二年级。后来台湾一个漫画家叫可乐王，他宣称到小学三年级就不念了，我很恨自己为什么要去上小学，输了人家一大截。</p><p>另外一个例子是小洛克菲勒。二次世界大战结束，各国决定要成立联合国。联合国的地址首选是伦敦、巴黎或纽约，但伦敦跟巴黎都很危险，大家就一致选定纽约。纽约光那片土地跟盖大楼就要花860万美金，但是没有人愿意捐土地给联合国，因为联合国没有任何利益。但小洛克菲勒知道了，宣称他要捐给联合国。所有人都觉他这个完全没有利益，可事实是，洛克菲勒买了100倍土地，中间那一块捐给联合国，当联合国建立了，他的土地涨了10倍，所以他虽然捐了860万，其实赚了8600万。</p><p>当然不是说不去努力，努力只比不努力好一点而已，是要会思考。我的结论就是人生其实很简单，只要你找寻你最拿手、最喜欢的事物，把它做到极致，无论做什么，没有不成功的。你做迷魂汤、做水晶包或做漫画家、工程师，都一样。</p><p>当你在做的过程中，要比其他人快，比其他人好。我每一次开画展都会要求这次要比上次快，还要比上次好，而价格要比上次更贵，最后当然都达到这个目的了。每一次都比上一次涨两千，然后你越做越快、越做越好，你就会进入到第三个状况，就会身心合一、排除一切。<br>就像我没有手表，没有手机，没有名片，不跟人家来往，我唯一的就是E-Mail。像一个怀胎九个月的妈妈，她很迫切地急着把自己的小孩生下来，所以舍不得睡觉，一醒来就赶快去完成事物。所以这个时候，你会发现人生的最大秘密，原来完成事物不是工作，而是人生最大的享受。</p><p>我今天讲得已经超过了30分钟，不好意思，谢谢。</p><p>以上<br>原文结束</p><h1 id="个人思考"><a href="#个人思考" class="headerlink" title="个人思考"></a>个人思考</h1><h2 id="一个故事"><a href="#一个故事" class="headerlink" title="一个故事"></a>一个故事</h2><p>有些人非常勤奋，别人休息和娱乐的时候，都在工作学习。但是努力了一辈子，人生也没有显著的提升，就像报道里经常说的：”某某在平凡的岗位上，勤勤恳恳工作了一辈子”。</p><p>另一方面，很多成功者似乎也没有特别努力，就取得了许多成就，过上了好日子。蔡志忠以自己为例，他从小就喜欢画画，然后一直画，不知不觉就成了大漫画家，名利双收，从没有觉得过得很辛苦。</p><hr><h2 id="老师或父母老是说，努力就会走到巅峰—-才怪。如果这样，不是所有人都走上巅峰了吗？没有人开始不努力，为什么后来不努力，因为努力没有效果。”"><a href="#老师或父母老是说，努力就会走到巅峰—-才怪。如果这样，不是所有人都走上巅峰了吗？没有人开始不努力，为什么后来不努力，因为努力没有效果。”" class="headerlink" title="老师或父母老是说，努力就会走到巅峰—-才怪。如果这样，不是所有人都走上巅峰了吗？没有人开始不努力，为什么后来不努力，因为努力没有效果。”"></a>老师或父母老是说，努力就会走到巅峰—-才怪。如果这样，不是所有人都走上巅峰了吗？没有人开始不努力，为什么后来不努力，因为努力没有效果。”</h2><p>人生不是走斜坡，你持续走就可以走到巅峰；人生像走阶梯，每一阶有每一阶的难点，学物理有物理的难点，学漫画有漫画的难点，你没有克服难点，再怎么努力都是原地跳。所以当你克服难点，你跳上去就不会下来了。`</p><p>蔡志忠的核心观点就是黑体的那句话，成功的人生是台阶式向上，而不是一条水平线。努力只是说明你拼命在走，跟你能不能向上走，关系不大。那些努力却没有结果的人，根本原因就在于，他一直走在平面上，没有走到更高的台阶。</p><p>也就是说，垂直方向的努力更有意义，水平方向的努力意义不大。你把同一件事情勤奋地做上十遍，还是只会做这一件事；你做完这件事后，再去挑战更难的事情，就有机会学会做两件事。</p><p>初学者经常问我，前端开发应该学习哪一个框架？我的回答就是，你觉得哪一个框架比较容易，就用那个。因为它们都是解决同样的问题，你只要知道怎么解决就可以了，没必要深究哪一个解决得更好。对你更重要的是，要去解决更多的问题，而不是如何最好地解决一个问题。</p><p>只有通过解决更多的问题，人生才能摆脱水平运动，进入上升运动。当然，这里还有一个天赋和兴趣的问题，如果找到属于你的领域，不用特别努力就能上台阶；如果找不对领域，再努力也只能做水平运动。</p><h2 id="另一个故事"><a href="#另一个故事" class="headerlink" title="另一个故事"></a>另一个故事</h2><p>挪威和孟加拉是两个截然不同的国家，但是它们有一个共同点：渔业都是两国的主要产业，很多人以打渔为生。</p><p>挪威渔民非常有钱，挪威是世界上最富裕的国家之一，人均 GDP 接近8万美元。<br>孟加拉国属于世界最贫穷的国家，人均 GDP 大约2000美元。</p><p>同样是打渔，为什么渔民的收入相差那么大？</p><p>你可能马上就会想到，他们的设备不一样，影响了收入。挪威渔民拥有大型现代化渔船，接受过各种培训，只要几个人就能捕到大量的鱼，所以收入高。孟加拉渔民只有小渔船，捕鱼能力有限，所以收入低。</p><p>上个世纪70年代，发生了一件事情。挪威向孟加拉国赠送了现代化渔船，作为援助。</p><p>孟加拉渔民现在有了同样的设备，能够提高收入吗？</p><p>答案还是不能。仅仅过了一年，这些现代化渔船就无法使用了，援助行动以惨败告终。孟加拉渔民缺乏相应的知识和技能，无法操作挪威渔船，同时也缺乏进行维修的基础设施和零配件，没有任何学校教渔民怎么修理这些船。现代化设备在孟加拉渔民手里，很多功能发挥不出来，出海遇到故障，只有眼睁睁看着整艘船坏掉。</p><p>一条现代化渔船，其实不仅仅是单纯的一条船，而是许多千丝万缕的因素联合在一起，使它能够建造出来，并得以良好地运行。</p><p>这件事的启示就是， 一个国家比另一个国家富裕，很大程度上并不取决于人民是否努力工作 （孟加拉人的努力程度，事实上可能远胜于挪威人），也不取决于设备，而是取决于许多其他因素，比如资本、知识技能、基础设施、销售渠道等等。所有这些外部因素，才是国家富裕的根本原因，人民的努力不是决定性因素。</p><p>这个道理放到人的身上，也是一样的。 人与人的收入不一样，原因不是甲比乙更努力，而是很多外部因素综合起来的结果。 甲拥有的资本、技能和环境条件超过了乙，使得甲所在的层次高于乙。一个餐厅服务员，无论怎样努力，收入恐怕都不会超过基金经理，道理就在这里。</p><p>这告诉我们，如果你想真正地提高收入，努力仅仅是一部分的因素，更重要的是，你必须设法提升自己的资本、技能和环境的层次。</p><p>就像上面说过的，你需要的不是”水平方向的努力”，而是”垂直方向的努力”。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;人生不是走斜坡，你持续走就可以走到巅峰；人生像走阶梯，每一阶有每一阶的难点，学物理有物理的难点，学漫画有漫画的难点，你没有克服难点，再怎么努力都是原地跳。所以当你克服难点，你跳上去就不会下来了。就像你学会语文，即使你十年不讲，碰到状况就会讲；就像学脚踏车，十年没骑，碰到脚踏车一上去就可以上手一样。&lt;/p&gt;</summary>
    
    
    
    <category term="读书笔记 c" scheme="https://trumming.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-c/"/>
    
    
  </entry>
  
  <entry>
    <title>术语库</title>
    <link href="https://trumming.github.io/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/%E6%9C%AF%E8%AF%AD%E5%BA%93.html"/>
    <id>https://trumming.github.io/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/%E6%9C%AF%E8%AF%AD%E5%BA%93.html</id>
    <published>2020-12-27T10:00:00.000Z</published>
    <updated>2021-02-28T15:50:02.853Z</updated>
    
    <content type="html"><![CDATA[<p>记录业内常用、通用的技术术语，按开头第一个字母正序排列。</p><a id="more"></a><h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h1 id="T"><a href="#T" class="headerlink" title="T"></a>T</h1><ol><li>TSL: Transport Security Layer</li></ol><h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><ol><li>SHE : Security Hardware Extension</li><li>SSL : Security Sockets Layer</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录业内常用、通用的技术术语，按开头第一个字母正序排列。&lt;/p&gt;</summary>
    
    
    
    <category term="效率工具" scheme="https://trumming.github.io/categories/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>蔚来汽车的语音助手NOMI</title>
    <link href="https://trumming.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%94%9A%E6%9D%A5%E6%B1%BD%E8%BD%A6%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%8A%A9%E6%89%8BNOMI.html"/>
    <id>https://trumming.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%94%9A%E6%9D%A5%E6%B1%BD%E8%BD%A6%E7%9A%84%E8%AF%AD%E9%9F%B3%E5%8A%A9%E6%89%8BNOMI.html</id>
    <published>2020-12-26T10:00:00.000Z</published>
    <updated>2020-12-28T15:50:03.203Z</updated>
    
    <content type="html"><![CDATA[<p>第一个问题是 <strong>AI 的恐怖谷效应</strong>，也就是当 AI 与人在外表或者动作十分相像时，人类会对 AI 产生好感，但同时随着相似度增加，人们又会注意到 AI 与人的细微差别，而产生恐惧的心理；</p><p>第二个问题是车规以及工业设计的挑战，类似 NOMI 这样一个几千元级别的偏消费电子的产品，如何与一辆售价 40 - 50 万元级别的豪华车相得益彰，外观上不掉价、不过时；同时这样的 AI 实体要满足车规要求，不能在碰撞试验中增加用户的安全风险；</p><p>第三是 NOMI 有了表情、声音和动作之后，这些动作如何进行精密同步，这比语音和 TTS（屏幕上的文字）同步，难度要再增加 1 - 2 个台阶。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/147463996">蔚来NOMI的野望：超越车载语音助手</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一个问题是 &lt;strong&gt;AI 的恐怖谷效应&lt;/strong&gt;，也就是当 AI 与人在外表或者动作十分相像时，人类会对 AI 产生好感，但同时随着相似度增加，人们又会注意到 AI 与人的细微差别，而产生恐惧的心理；&lt;/p&gt;
&lt;p&gt;第二个问题是车规以及工业设计的挑战，类似</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://trumming.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>我是如何记笔记的</title>
    <link href="https://trumming.github.io/%E8%87%AA%E5%B7%B1%E7%9E%8E%E5%86%99/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0%E7%9A%84.html"/>
    <id>https://trumming.github.io/%E8%87%AA%E5%B7%B1%E7%9E%8E%E5%86%99/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0%E7%9A%84.html</id>
    <published>2020-12-21T10:00:00.000Z</published>
    <updated>2020-12-27T15:50:03.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何对笔记进行分类"><a href="#如何对笔记进行分类" class="headerlink" title="如何对笔记进行分类"></a>如何对笔记进行分类</h1><p>初衷是做减法；</p><p>个人写作能力一般，不要脑子蹦个什么出来都去写，而是要写自己专注部分的思考和实践。</p><a id="more"></a><h2 id="标签-tags"><a href="#标签-tags" class="headerlink" title="标签 tags"></a>标签 tags</h2><h2 id="分类-categories"><a href="#分类-categories" class="headerlink" title="分类 categories"></a>分类 categories</h2><h3 id="软件工具"><a href="#软件工具" class="headerlink" title="软件工具"></a>软件工具</h3><ul><li>总结一些软件开发过程中会用到的工具，一般只软件开发专用的软件，比如编程语言、设计工具、代码管理工具、IDE、等</li></ul><h3 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h3><ul><li>提升工作效率的小tips，能够提高效率的一些方法论，以及工具分享，例如好用的截图软件、国内镜像源、梯子等</li></ul><h3 id="QNX"><a href="#QNX" class="headerlink" title="QNX"></a>QNX</h3><ul><li>qnx 操作系统相关的所有</li></ul><h3 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h3><h3 id="自己瞎写"><a href="#自己瞎写" class="headerlink" title="自己瞎写"></a>自己瞎写</h3><h2 id="笔记软件"><a href="#笔记软件" class="headerlink" title="笔记软件"></a>笔记软件</h2><ul><li><p>onenote</p></li><li><p>有道云笔记</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;如何对笔记进行分类&quot;&gt;&lt;a href=&quot;#如何对笔记进行分类&quot; class=&quot;headerlink&quot; title=&quot;如何对笔记进行分类&quot;&gt;&lt;/a&gt;如何对笔记进行分类&lt;/h1&gt;&lt;p&gt;初衷是做减法；&lt;/p&gt;
&lt;p&gt;个人写作能力一般，不要脑子蹦个什么出来都去写，而是要写自己专注部分的思考和实践。&lt;/p&gt;</summary>
    
    
    
    <category term="自己瞎写" scheme="https://trumming.github.io/categories/%E8%87%AA%E5%B7%B1%E7%9E%8E%E5%86%99/"/>
    
    
  </entry>
  
  <entry>
    <title>测试自动部署</title>
    <link href="https://trumming.github.io/QNX/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2.html"/>
    <id>https://trumming.github.io/QNX/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2.html</id>
    <published>2020-10-18T10:00:00.000Z</published>
    <updated>2020-12-21T15:50:06.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>今天是第二次测试，看看结果如何；<br>今天是第三次测试，看看结果如何；<br>今天是第四次测试，看看结果如何；<br>今天是第五次测试，看看结果如何；<br>今天是第六次测试，看看结果如何；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;p&gt;今天是第二次测试，看看结果如何；&lt;br&gt;今天是第三次测试，看看结果如何；&lt;br&gt;今天是第四次测试，看看结果如何；&lt;br&gt;今天是第五次测试，看</summary>
      
    
    
    
    <category term="QNX" scheme="https://trumming.github.io/categories/QNX/"/>
    
    
    <category term="slog" scheme="https://trumming.github.io/tags/slog/"/>
    
  </entry>
  
  <entry>
    <title>SLM (System launch and monitor) 系统启动和监控上手指南</title>
    <link href="https://trumming.github.io/QNX/SLM%20(System%20launch%20and%20monitor)%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%92%8C%E7%9B%91%E6%8E%A7%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97.html"/>
    <id>https://trumming.github.io/QNX/SLM%20(System%20launch%20and%20monitor)%20%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E5%92%8C%E7%9B%91%E6%8E%A7%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97.html</id>
    <published>2020-10-16T10:00:00.000Z</published>
    <updated>2020-12-20T15:50:04.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SLM-System-launch-and-monitor"><a href="#SLM-System-launch-and-monitor" class="headerlink" title="SLM (System launch and monitor)"></a>SLM (System launch and monitor)</h1><p>QNX为一些复杂的进程提供便利的启动手段，尤其适合多个进程之间存在依赖，且它们之间有严格的启动时序要求的场景；</p><a id="more"></a> <p><a href="http://www.qnx.com/developers/docs/7.0.0/index.html#com.qnx.doc.neutrino.utilities/topic/s/slm.html">QNX Doc 7.0 : SLM</a></p><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slm [-avV] [-D debug_mode] [-n subsystem_path] [-p priority]</span><br><span class="line">    [-P search_path] [-r recovery_mode] [-R frequency&#x2F;sec|min|hour]</span><br><span class="line">    [-s comp_name] [-t polling_interval] [-T total_wait]</span><br><span class="line">    [-x comp_name] config_file</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>-v 设定slog2输出等级，并输出到slog2系统，默认是warning等级；它是累加的，-vv = verbosity Level 2,-vvvvvvv = verbosity Level 7;</li><li>-V 设定log输出等级，并输出到控制台，默认是error等级；它是累加的，-VV = verbosity Level 2,-VVVVVVVV = verbosity Level 7;</li></ul><h2 id="SLM-configuration-file"><a href="#SLM-configuration-file" class="headerlink" title="SLM configuration file"></a>SLM configuration file</h2><p>使用xml来配置启动的进程</p><h3 id="xml的根元素"><a href="#xml的根元素" class="headerlink" title="xml的根元素"></a>xml的根元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;SLM:system&gt;</span><br><span class="line">    -- component and module descriptions --</span><br><span class="line">&lt;&#x2F;SLM:system&gt;</span><br></pre></td></tr></table></figure><h3 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h3><p>所有的进程都将存放在components中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;SLM:component name&#x3D;&quot;qconn&quot;&gt;</span><br><span class="line">    -- component properties --</span><br><span class="line">&lt;&#x2F;SLM:component&gt;</span><br></pre></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>有将近20来个参数，捡几个常用的讲讲；</p><ul><li>args ：运行进程是后面的参数，多个参数只需要用空格分开即可</li><li>cd ： 在执行command前，执行切换路径命令cd</li><li>command ： 需要SLM执行的命令，或者进程</li><li>depend ： 启动command的依赖，为component name，多个依赖需要增加这个字段</li><li>waitfor ： 进程启动后，只有waitfor的项目满足了，才会去启动依赖该项目的命令或进程</li></ul><h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><p>由多个component组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;SLM:module name&#x3D;&quot;device_monitors&quot;&gt;</span><br><span class="line">    -- module description --</span><br><span class="line">&lt;&#x2F;SLM:module&gt;</span><br></pre></td></tr></table></figure><ul><li>样例XML文件</li></ul><p>net-setup模块，包含了io-pkt和ifconfig两个Component;</p><ul><li>首先，启动io-pkt这个组件</li><li>第二，通过ifconfig设置ip</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;SLM:system&gt;</span><br><span class="line">    &lt;SLM:component name&#x3D;&quot;io-pkt&quot;&gt;</span><br><span class="line">        &lt;SLM:command&gt;&#x2F;sbin&#x2F;io-pkt-v6-hc&lt;&#x2F;SLM:command&gt;</span><br><span class="line">        &lt;SLM:args&gt;-ptcpip stacksize&#x3D;8192&lt;&#x2F;SLM:args&gt;</span><br><span class="line">        &lt;SLM:waitfor wait&#x3D;&quot;pathname&quot;&gt;&#x2F;dev&#x2F;socket&lt;&#x2F;SLM:waitfor&gt;</span><br><span class="line">    &lt;&#x2F;SLM:component&gt;</span><br><span class="line">    &lt;SLM:component name&#x3D;&quot;ifconfig&quot;&gt;</span><br><span class="line">        &lt;SLM:depend&gt;io-pkt&lt;&#x2F;SLM:depend&gt;</span><br><span class="line">        &lt;SLM:command&gt;&#x2F;sbin&#x2F;ifconfig&lt;&#x2F;SLM:command&gt;</span><br><span class="line">        &lt;SLM:args&gt;en0 192.168.1.5 up&lt;&#x2F;SLM:args&gt;</span><br><span class="line">        &lt;SLM:waitfor wait&#x3D;&quot;exits&quot;&gt;&lt;&#x2F;SLM:waitfor&gt;</span><br><span class="line">    &lt;&#x2F;SLM:component&gt;</span><br><span class="line">    &lt;SLM:module name&#x3D;&quot;net-setup&quot;&gt;</span><br><span class="line">        &lt;SLM:member&gt;io-pkt&lt;&#x2F;SLM:member&gt;</span><br><span class="line">        &lt;SLM:member&gt;ifconfig&lt;&#x2F;SLM:member&gt;</span><br><span class="line">    &lt;&#x2F;SLM:module&gt;</span><br><span class="line">&lt;&#x2F;SLM:system&gt;</span><br></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ul><li>a.xml</li></ul><p>包含两个component</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;SLM:component name&#x3D;&quot;icservice&quot;&gt;</span><br><span class="line">    &lt;SLM:command&gt;&#x2F;cluster&#x2F;bin&#x2F;CMW_Cluster&lt;&#x2F;SLM:command&gt;</span><br><span class="line">    &lt;SLM:args&gt;none&lt;&#x2F;SLM:args&gt;</span><br><span class="line">    &lt;SLM:depend&gt;inc_server&lt;&#x2F;SLM:depend&gt;</span><br><span class="line">    &lt;SLM:repair&gt;none&lt;&#x2F;SLM:repair&gt;</span><br><span class="line">&lt;&#x2F;SLM:component&gt;</span><br><span class="line"></span><br><span class="line">&lt;SLM:component name&#x3D;&quot;icbkhmi&quot;&gt;</span><br><span class="line">    &lt;SLM:cd&gt;&#x2F;cluster&#x2F;icbkhmi&#x2F;&lt;&#x2F;SLM:cd&gt;</span><br><span class="line">    &lt;SLM:command&gt;&#x2F;cluster&#x2F;icbkhmi&#x2F;ClusterBackground&lt;&#x2F;SLM:command&gt;</span><br><span class="line">    &lt;SLM:args&gt;none&lt;&#x2F;SLM:args&gt;</span><br><span class="line">    &lt;SLM:depend&gt;icservice&lt;&#x2F;SLM:depend&gt;</span><br><span class="line">    &lt;SLM:repair&gt;none&lt;&#x2F;SLM:repair&gt;</span><br><span class="line">&lt;&#x2F;SLM:component&gt;</span><br></pre></td></tr></table></figure><ul><li>b.xml</li></ul><p>将a.xml包含到b.xml，这种方式好处是模块化，每个人都可以构建自己模块的一个xml，然后再包含到b.xml中；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE SLM_system [</span><br><span class="line">    &lt;!ENTITY cluster_hmi SYSTEM &#39;a.xml&#39;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;SLM:system&gt;</span><br><span class="line">    &amp;cluster_hmi;</span><br><span class="line">&lt;&#x2F;SLM:system&gt;</span><br></pre></td></tr></table></figure><ul><li>SLM启动a.xml中定义的两个component</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slm -V b.xml</span><br></pre></td></tr></table></figure><h1 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h1><ul><li>如果b.xml中有多个module要启动，如果其中一个module因为“ No such file or directory” 错误而无法执行，那么slm将会停止启动排在它后面的模块；</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SLM-System-launch-and-monitor&quot;&gt;&lt;a href=&quot;#SLM-System-launch-and-monitor&quot; class=&quot;headerlink&quot; title=&quot;SLM (System launch and monitor)&quot;&gt;&lt;/a&gt;SLM (System launch and monitor)&lt;/h1&gt;&lt;p&gt;QNX为一些复杂的进程提供便利的启动手段，尤其适合多个进程之间存在依赖，且它们之间有严格的启动时序要求的场景；&lt;/p&gt;</summary>
    
    
    
    <category term="QNX" scheme="https://trumming.github.io/categories/QNX/"/>
    
    
    <category term="SLM" scheme="https://trumming.github.io/tags/SLM/"/>
    
  </entry>
  
  <entry>
    <title>QNX slog2日志系统上手指南</title>
    <link href="https://trumming.github.io/QNX/QNX%20slog2%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97.html"/>
    <id>https://trumming.github.io/QNX/QNX%20slog2%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%8A%E6%89%8B%E6%8C%87%E5%8D%97.html</id>
    <published>2020-10-08T10:00:00.000Z</published>
    <updated>2020-12-20T15:50:03.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>slog2 是QNX系统提供的一套log机制；可通过slog2info命令获取历史log；</p><a id="more"></a><h1 id="使用slog2"><a href="#使用slog2" class="headerlink" title="使用slog2"></a>使用slog2</h1><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><p>1 配置<strong>buffer集</strong>名称和大小，以及log等级</p><p>2 创建slog2 <strong>buffer集</strong> 实例</p><p>3 打印log</p><h3 id="1-配置"><a href="#1-配置" class="headerlink" title="1 配置"></a>1 配置</h3><ul><li><p>buffer set 配置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    int                   num_buffers;</span><br><span class="line">    const char           *buffer_set_name;</span><br><span class="line">    uint8_t               verbosity_level;</span><br><span class="line">    slog2_buffer_config_t buffer_config[ SLOG2_MAX_BUFFERS ];</span><br><span class="line">    uint32_t              max_retries;</span><br><span class="line">&#125; slog2_buffer_set_config_t;</span><br></pre></td></tr></table></figure><ul><li>num_buffers ： log <strong>buffer集</strong> 中有多少个buffer</li><li>buffer_set_name : log <strong>buffer集</strong>的名称一般是进程名，slog2info -b 参数使用</li><li>verbosity_level ： 整个log <strong>buffer集</strong>中的最小verbosity_level，只有高于verbosity_level的log才会写入log buffer中；</li><li>buffer_config ：log buffer</li></ul></li><li><p>buffer 配置</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    const char    *buffer_name;</span><br><span class="line">    int            num_pages;</span><br><span class="line">&#125; slog2_buffer_config_t;</span><br></pre></td></tr></table></figure><ul><li>buffer name ： slog2 buffer 名称</li><li>num_pages : 用于定于log buffer的大小，一个page是4kB</li></ul></li></ul><h3 id="2-创建slog2-buffer集实例"><a href="#2-创建slog2-buffer集实例" class="headerlink" title="2 创建slog2 buffer集实例"></a>2 创建slog2 buffer集实例</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;slog2.h&gt;</span><br><span class="line"></span><br><span class="line">int slog2_register( slog2_buffer_set_config_t *config,</span><br><span class="line">                    slog2_buffer_t *handles,</span><br><span class="line">                    uint32_t flags );</span><br></pre></td></tr></table></figure>* config ： buffer集的配置结构体* handles ： 返回操作buffer的handle，后面打印log函数会用到* flags ：用于指定是否存放到flash中，方便热启时恢复；[参考链接](http://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/slog2_register.html)* 返回值：0 成功，-1 失败</code></pre><h3 id="3-打印log"><a href="#3-打印log" class="headerlink" title="3 打印log"></a>3 打印log</h3><ul><li>打印一段固定字符串</li></ul><p><code>int slog2c( slog2_buffer_t buffer,             uint16_t code,             uint8_t severity,             const char* data );</code></p><p>slog2c( handle, 0, SLOG2_INFO,  “Writing a constant string into the buffer” );</p><p><strong>code</strong>参数在slog2info -e 中用到，slog2系统不做任何处理；</p><ul><li>打印一段格式化字符串<br>`int slog2f( slog2_buffer_t buffer,<pre><code>      uint16_t code,      uint8_t severity,      const char* format, ... );`</code></pre></li></ul><p>slog2f( handle, 0, SLOG2_INFO, “Writing a formatted string into the buffer: %s”, argv[0] );</p><ul><li>打印一段格式化字符串，不会触发中断，可用于中断函数中，格式化是在读取log的时候发生<br>`int slog2fa( slog2_buffer_t buffer,<pre><code>       uint16_t code,       uint8_t severity,       const char* format, ... );`</code></pre></li></ul><p>SLOG2_FA_ 开头的宏必须的；</p><p>slog2fa( buffer_handle[0], 0, SLOG2_WARNING, “string:%s, some_number:%d”,SLOG2_FA_STRING( “Hello world” ),SLOG2_FA_SIGNED( some_number ),SLOG2_FA_END);</p><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><ul><li>头文件 #include &lt;sys/slog2.h&gt;</li><li>需要链接库 libslog2 </li></ul><h1 id="查看slog2"><a href="#查看slog2" class="headerlink" title="查看slog2"></a>查看slog2</h1><p>使用slog2info 命令来查看具体的log内容<br><code>slog2info [-acfinSstvWw] [-b bset1,bset2,...] [-d path]           [-e code1,code2,...] [-l filename] [-r [resetfilename]]</code></p><ul><li>查看某一个bufferset的log  <code>slog2info -b buffer_set_name</code></li><li>查看从最后一次reset开始的log  <code>slog2info -r</code></li><li>一直打印log到终端 <code>slog2info -w</code></li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>verbosity_level：</p><ul><li>SLOG2_SHUTDOWN — shut down the system now (e.g., for OEM use).</li><li>SLOG2_CRITICAL — unexpected unrecoverable error (e.g., hard disk error).</li><li>SLOG2_ERROR — unexpected recoverable error (e.g., you need to reset a hardware controller).</li><li>SLOG2_WARNING — expected error (e.g., parity error on a serial port).</li><li>SLOG2_NOTICE — warning (e.g., out of paper).</li><li>SLOG2_INFO — information (e.g., printing page 3).</li><li>SLOG2_DEBUG1 — debug messages (e.g., normal detail).</li><li>SLOG2_DEBUG2 — debug messages (e.g., fine detail).</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;slog2 是QNX系统提供的一套log机制；可通过slog2info命令获取历史log；&lt;/p&gt;</summary>
    
    
    
    <category term="QNX" scheme="https://trumming.github.io/categories/QNX/"/>
    
    
    <category term="slog2" scheme="https://trumming.github.io/tags/slog2/"/>
    
  </entry>
  
  <entry>
    <title>Samba使用入门[Ubuntu 16.04]</title>
    <link href="https://trumming.github.io/uncategorized/Samba%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8[Ubuntu%2016.04].html"/>
    <id>https://trumming.github.io/uncategorized/Samba%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8[Ubuntu%2016.04].html</id>
    <published>2019-04-27T03:48:58.000Z</published>
    <updated>2020-12-20T15:50:05.584Z</updated>
    
    <content type="html"><![CDATA[<p>家里买了猫盘，启动了samba服务，笔记本安装的ubuntu虚拟机的磁盘可用空间告急，故想着把一些数据搬运到猫盘上，所以才有此文。</p><a id="more"></a> <p>ubuntu环境下，可以通过终端<code>smbclient</code>命令访问samba服务器，也通过<code>mount</code>挂载命令将其挂载后当作一个目录来操作了，非常方便。个人喜欢用挂载的方式。通常情况需要<code>smbclient</code>和<code>mount</code>命令一同使用，前者用来查看服务器目录，后者将其挂载。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>猫盘，开启samba服务，获取到IP <code>192.168.1.201</code></p></li><li><p>安装 samba</p><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install samba</span><br></pre></td></tr></table></figure></li><li><p>检查安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ samba -V</span><br></pre></td></tr></table></figure><blockquote><p>终端输出 <code>Version 4.3.11-Ubuntu</code> 表示安装成功</p></blockquote></li></ul></li><li><p>安装 samba client</p><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install smbclient</span><br></pre></td></tr></table></figure></li><li><p>检查安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ smbclient -V</span><br></pre></td></tr></table></figure><blockquote><p>终端输出 <code>Version 4.3.11-Ubuntu</code> 表示安装成功</p></blockquote></li></ul></li></ul><p>安装成功之后，接下来就可以通过smbclient命令来访问和操作猫盘了。</p><h1 id="访问samba服务器"><a href="#访问samba服务器" class="headerlink" title="访问samba服务器"></a>访问samba服务器</h1><ul><li><p>查看samba服务器内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ smbclient -L 192.168.1.201 -U username</span><br></pre></td></tr></table></figure><p>-L 列出服务器下的所有目录</p><p>-U 后面接用户名，表示以该用户名访问</p><p>or 匿名访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L 192.168.1.201</span><br></pre></td></tr></table></figure><blockquote><p>敲下命令后终端会提示输入密码，若不输入密码直接Enter则默认为匿名访问模式</p></blockquote></li><li><p>交互方式登陆samba目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //192.168.1.201/我的猫盘 -U username</span><br></pre></td></tr></table></figure><blockquote><p>然后输入密码，成功后出现提示符<code>smb:\&gt;</code> 接着就可以开始操作.</p></blockquote><blockquote><p>可以通过敲入 <strong>? or help</strong> 查看支持的所有命令，再通过 <strong>help cmd</strong> 命令来获取cmd的用法。</p></blockquote></li><li><p>挂载samba目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t cifs //192.168.1.201/我的猫盘/00_ubuntu_disk ~/catDriver/ -o username=user</span><br></pre></td></tr></table></figure><p>挂载成功后，就可以当作一个目录来操作了，非常方便。：)</p></li></ul><h1 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h1><p>挂载的过程报如下次</p><blockquote><p>mount: block device //192.168.1.201/我的猫盘/00_ubuntu_disk is write-protected, mounting read-only</p></blockquote><p>原因是未安装 cifs-utils </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cifs-utils</span><br></pre></td></tr></table></figure><p>安装后问题解决</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;家里买了猫盘，启动了samba服务，笔记本安装的ubuntu虚拟机的磁盘可用空间告急，故想着把一些数据搬运到猫盘上，所以才有此文。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Samba" scheme="https://trumming.github.io/tags/Samba/"/>
    
  </entry>
  
  <entry>
    <title>读《高效程序员的45个习惯——敏捷开发修炼之道》</title>
    <link href="https://trumming.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E3%80%8A%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E3%80%8B.html"/>
    <id>https://trumming.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%AF%BB%E3%80%8A%E9%AB%98%E6%95%88%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%8445%E4%B8%AA%E4%B9%A0%E6%83%AF%E2%80%94%E2%80%94%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93%E3%80%8B.html</id>
    <published>2018-03-30T12:47:14.000Z</published>
    <updated>2020-12-20T15:50:06.414Z</updated>
    
    <content type="html"><![CDATA[<p>什么是敏捷开发？<strong>敏捷开发就是在一个高度协作的环境中，不断地使用反馈进行自我调整和完善</strong>，作者认为敏捷是高效软件开发的先进方法。</p><a id="more"></a><h1 id="什么是敏捷"><a href="#什么是敏捷" class="headerlink" title="什么是敏捷"></a>什么是敏捷</h1><p>敏捷开发宣言：<strong>一种把以人为本，团队合作，快速响应变化和可工作的软件作为宗旨的开发方法</strong><br>敏捷开发重点：<strong>越早发现问题，就越容易修复问题，所以就应该在此时此刻把问题修复</strong></p><h1 id="26个习惯"><a href="#26个习惯" class="headerlink" title="26个习惯"></a>26个习惯</h1><ol><li>集中精力放在 <em>做事情</em> 上，莫去指责他人</li><li><em>欲速则不达</em> ，要投入精力去保持代码的整洁，敞亮（做好代码复审）</li><li><em>跟踪技术变化</em> ，不需要精通所有技术，但需要知道行业动向，从而规划项目和职业生涯</li><li><em>对团队投资</em>，想办法增进团队成员的知识和技能</li><li><em>懂的丢弃</em>，旧的不去新的不来，应用新的方法</li><li>设法找到 <em>ROOT CAUSE</em></li><li><em>保持项目时刻可以发布</em> ，随时可以编译运行测试和部署。</li><li><em>持续集成</em> + 自动部署</li><li><em>增量开发</em></li><li><em>使用自动化的单元测试</em>，单元测试是优质股，值得投资</li><li><em>使用TDD开发技术</em>， Test Driven Development 测试驱动开发，编码之前先写测试</li><li><em>度量真实的进度</em>， 恰当的评估剩余工作量</li><li><em>代码能清晰的表达意图</em>，代码表达准确，不令人迷惑，不写讨巧的代码，用注释沟通</li><li><em>在短的编辑、构建、测试循环中编写代码</em>， 而不是一次性写完，采用增量开发</li><li><em>内聚</em>，让类的功能尽量集中，让组件尽量小</li><li><em>告知，不要询问</em>，告诉别的对象或则组件的做什么，然后盯着自己的职责</li><li><em>保持接口的一致性</em>，提高适应性</li><li><em>记录问题及解决方案</em>，分享给团队成员</li><li><em>重视警告信息</em>，而不只关注error</li><li><em>隔离问题域</em>，将问题域与周边隔离开，特别是大型软件中</li><li><em>立会</em>，会议短小精悍不跑题</li><li><em>成为指导者</em>，教学相长（也是投资团队的一种方式）</li><li><em>给别人解决问题的机会</em>， 给他们指明方向，而不是直接给解决方案</li><li><em>共享能用的代码</em>，经过编译测试，并成功后再共享代码</li><li><em>代码复查</em>，结对编程等等</li><li><em>及时通报进展与问题</em>，发布进展、新的想法和目前关注的问题</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这里我将45个习惯根据自己的情况缩减到了26个，个人认为这26个习惯可以对自己的工作产生积极影响。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是敏捷开发？&lt;strong&gt;敏捷开发就是在一个高度协作的环境中，不断地使用反馈进行自我调整和完善&lt;/strong&gt;，作者认为敏捷是高效软件开发的先进方法。&lt;/p&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://trumming.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Next主题之tags页面报错</title>
    <link href="https://trumming.github.io/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Next%E4%B8%BB%E9%A2%98%E4%B9%8Btags%E9%A1%B5%E9%9D%A2%E6%8A%A5%E9%94%99%20.html"/>
    <id>https://trumming.github.io/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Next%E4%B8%BB%E9%A2%98%E4%B9%8Btags%E9%A1%B5%E9%9D%A2%E6%8A%A5%E9%94%99%20.html</id>
    <published>2018-03-29T12:51:04.000Z</published>
    <updated>2020-12-20T15:50:04.504Z</updated>
    
    <content type="html"><![CDATA[<p>对于博主新手来说，对于javascript和前端，网页制作都是小白，认识非常少。虽然这个问题很小，但是遇到问题有时不知道如何下手，在一些错误的方法中试错，非常耽误时间。这里多亏网友们的分享，才能快速定位到可能的原因，最后慢慢解决问题。</p><a id="more"></a> <h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>  这段时间博主遇到了一些问题，debug信息如下：</p><pre><code>GET /tags/ 404 0.993 ms - 144</code></pre><p>  我按照Next给出文档打开相应的tags标签，在public文件夹中也生成了_tags_文件夹，但在页面点击标签时爆出上面的错误，很是纳闷。配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure><p>  最后通过查阅网友的搭建经验分享和<a href="http://theme-next.iissnan.com/theme-settings.html#tags-page">next官方文档</a>，最后找到了答案。我虽然在Next主题的配置文件_config.yml_中打开了tags标签，但是并没有在_tags_文件夹中生成index.html文件，从而导致了问题的产生，所以解决的方式就是创建出这个index.html文件。</p><h1 id="创建新页"><a href="#创建新页" class="headerlink" title="创建新页"></a>创建新页</h1><p>  通过<code>new page</code>命令来生成所需要的页面。</p><pre><code>$ hexo new page tags</code></pre><p>  此命令会在_source_文件夹中生成一个_tags_文件夹，里头有一个index.md文件，修改其中内容为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>  然后再重新生成网页，这时发现在_tags_文件夹中生成了index.html文件。最后经过测试问题解决。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>分析解决这个问题过程中会用到的命令：</p><ul><li>查看debug信息<br>通过在命令后面加<code>--debug</code>字段显示调试信息，例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server --debug</span><br></pre></td></tr></table></figure><ul><li>新建页面命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &lt;title&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于博主新手来说，对于javascript和前端，网页制作都是小白，认识非常少。虽然这个问题很小，但是遇到问题有时不知道如何下手，在一些错误的方法中试错，非常耽误时间。这里多亏网友们的分享，才能快速定位到可能的原因，最后慢慢解决问题。&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://trumming.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Next主题" scheme="https://trumming.github.io/tags/Next%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>费曼技巧</title>
    <link href="https://trumming.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%B4%B9%E6%9B%BC%E6%8A%80%E5%B7%A7.html"/>
    <id>https://trumming.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%B4%B9%E6%9B%BC%E6%8A%80%E5%B7%A7.html</id>
    <published>2018-03-24T12:47:14.000Z</published>
    <updated>2020-12-20T15:50:06.564Z</updated>
    
    <content type="html"><![CDATA[<p>那些声称清楚自己所想，但却不能清晰表达的人，其实通常不知道自己所想。— Mortimer Adler</p><a id="more"></a><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>费曼技巧是有诺贝尔物理奖获得者理查德·费曼（Richand Feynman）的独特学习方法<a href="%5B%E8%B4%B9%E6%9B%BC%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%9C%80%E5%BC%BA%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%5D(https://36kr.com/p/5078124.html)">^1</a>。</p><p>费曼技巧有四个简单的步骤：(简要概括)</p><ol><li>选择一个概念</li><li>把它教给完全不懂的另外一个人</li><li>如果卡壳，回到原始材料</li><li>回顾后简化语言表达（可选择）</li></ol><p>知识有两种类型：第一类知识注重了解某个事物的名称；第二类知识注重了解某件事物。</p><h1 id="费曼技巧"><a href="#费曼技巧" class="headerlink" title="费曼技巧"></a><strong>费曼技巧</strong></h1><p>该技巧主要包含四步：</p><p><strong>第一步：把它教给一个小孩子。</strong></p><p>拿出一张白纸，在上方写下你想要学习的主题。想一下，如果你要把它教给一个孩子，你会讲哪些，并写下来。这里你的教授对象不是你自己那些聪明的成年朋友，而是一个 8 岁的孩子，他的词汇量和注意力刚好能够理解基本概念和关系。</p><p>许多人会倾向于使用<code>复杂的词汇</code>和<code>行话</code>来掩盖他们不明白的东西。问题是我们只在糊弄自己，因为我们不知道自己也不明白。另外，使用行话会隐藏周围人对我们的误解。</p><p>当你自始至终都用孩子可以理解的简单的语言写出一个想法（提示：只用最常见的单词），那么你便迫使自己在更深层次上理解了该概念，并简化了观点之间的关系和联系。如果你努力，就会清楚地知道自己在哪里还有不明白的地方。这种<code>紧张状态</code>很好——预示着学习的机会到来了。</p><p><strong>第二步：回顾。</strong></p><p>在第一步中，你不可避免地会卡壳，忘记重要的点，不能解释，或者说不能将重要的概念联系起来。</p><p>这一<code>反馈</code>相当宝贵，因为你已经发现了自己知识的边缘。懂得自己能力的界限也是一种能力，你刚刚就确定了一个！</p><p>这是学习开始的地方。现在你知道自己在哪里卡住了，那么就回到原始材料，重新学习，直到你可以用基本的术语解释这一概念。</p><p>认定自己知识的界限，会限制你可能犯的错误，并且在应用该知识时，可以增加成功的几率。</p><p><strong>第三步：将语言条理化，简化。</strong></p><p>现在你手上有一套自己手写笔记，检查一下确保自己没有从原材料中借用任何行话。将这些笔记用简单的语言组织成一个流畅的故事。</p><p>将这个故事大声读出来，如果这些解释不够简单，或者听起来比较混乱，很好，这意味着你想要理解该领域，还需要做一些工作。</p><p><strong>第四步（可选）：传授</strong></p><p>如果你真的想确保你的理解没什么问题，就把它教给另一个人（理想状态下，这个人应该对这个话题知之甚少，或者就找个 8 岁的孩子）。检测知识最终的途径是你能有能力把它传播给另一个人。</p><p>这不仅是学习的妙方，还是窥探不同思维方式的窗口，它让你将想法撕开揉碎，从头重组。这种学习方法会让你对观点和概念有更为深入的理解。重要的是，以这种方式解决问题，你可以在别人不知道他们自己在说什么的情况下，理解这个问题。</p><p>费曼的方法直观地认为智力是一个增长的过程，这与 Carol Dweck 的研究非常吻合，Carol Dweck 精确地描述了停滞型思维（fixed mindset）和成长型思维（growth mindset）之间的区别。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;那些声称清楚自己所想，但却不能清晰表达的人，其实通常不知道自己所想。— Mortimer Adler&lt;/p&gt;</summary>
    
    
    
    <category term="读书笔记" scheme="https://trumming.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Numpy and Pandas</title>
    <link href="https://trumming.github.io/Python/Numpy%20and%20Pandas.html"/>
    <id>https://trumming.github.io/Python/Numpy%20and%20Pandas.html</id>
    <published>2018-03-21T12:51:04.000Z</published>
    <updated>2020-12-28T15:50:03.293Z</updated>
    
    <content type="html"><![CDATA[<p>Numpy 和 Pandas[^1]是科学运算当中最重要的两个模块，在数据分析，机器学习领域不可或缺。其特点是运算速度快和消耗的资源少。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在windows 10下通过下面指令安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install numpy</span><br><span class="line">$ pip install pandas</span><br></pre></td></tr></table></figure><p>如果安装遇到问题，可能与VS有关，网络上有很多解决办法。</p><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><p>numpy arrary的属性：</p><ul><li>ndim ： 维度</li><li>shape：行数与列数</li><li>size：元素个数</li></ul><p>numpy 的方法：</p><ul><li>array() ：创建数组</li><li>zeros()：创建数据全为0的数组</li><li>ones()：创建数据全为1的数组</li><li>empty()：创建数据全接近0的数组</li><li>arrange()：按指定范围创建数据</li><li>linspace(): 创建线段</li><li>reshape(): 改变数据形状</li></ul><p>numpy的属性：</p><ul><li>dtype: 指定数据类型</li></ul><p>将元素列表转化成numpy矩阵：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array = np.arrary([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Array并指定数据类型为float，数据类型有int，int32, float32</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],dtype=np.float)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个元素全为1的2x5的2维矩阵</span></span><br><span class="line">all_1 = np.ones((<span class="number">2</span>,<span class="number">5</span>),dtype=np.int)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用arrange创建[10,19]步长为1的连续数组</span></span><br><span class="line">a = np.arange(<span class="number">10</span>,<span class="number">20</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将连续数据改变成2x5的2维矩阵</span></span><br><span class="line">a = a.reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Numpy基础运算：</p><ul><li><p>加减乘除</p><ul><li><p>加, 减</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c &#x3D; a - all_1</span><br><span class="line">c &#x3D; a + all_1</span><br></pre></td></tr></table></figure></li><li><p>乘，这里的乘法是里面元素一一对应的相乘而非矩阵乘法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c &#x3D; a * all_1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>平方</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c &#x3D; a**2</span><br></pre></td></tr></table></figure><ul><li>矩阵乘法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c_dot &#x3D; a.dot(all_1)or</span><br><span class="line">c_dot &#x3D; np.dot(a, all_1)</span><br></pre></td></tr></table></figure><ul><li>常用数学函数<ul><li>sin</li><li>sum</li><li>min</li><li>max</li><li>argmin() 获取矩阵中最小元素的索引</li><li>argmax() 获取矩阵中最大元素的索引</li><li>mean() 求均值</li><li>median() 求中位数</li><li>cumsum() 生成的每一项矩阵元素均是从原矩阵首项累加到对应项的元素之和</li><li>diff() 累差函数，没一行中后一项与前一项的差，最后一列舍去</li><li>sort() </li><li>transpose() 求矩阵转置</li><li>…</li></ul></li></ul><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>Pandas是基于Numpy构建的，让Numpy为中心的应用变得更加简单。首先理解其两个数据结构：Series和DataFrame。</p><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p><code>Series</code>可以将他理解成一列数据，索引在左边，值在右边。如果数据未指定索引，系统自动创建一个0到N-1（N为长度）的整数型索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># create a series</span><br><span class="line">import pandas as pd</span><br><span class="line">s &#x3D; pd.Series([1,3,6,np.nan,44,1])</span><br></pre></td></tr></table></figure><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p><code>DataFrame</code>是一个表格型的数据结构，它包含有多组有序的列，每列可以是不同的值类型（数值，字符串，布尔值等）。<code>DataFrame</code>既有行索引也有列索引， 它可以被看做由<code>Series</code>组成的大字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个DataFrame结构，列名称分别为a，b，c，d，shape为6x4的矩阵</span><br><span class="line">df &#x3D; pd.DataFrame(np.random.randn(6,4),columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br><span class="line"></span><br><span class="line"># 创建一个DataFrame结构，列名称分别为a，b，c，d，shape为6x4的矩阵，并且指定行名称</span><br><span class="line">dates &#x3D; pd.date_range(&#39;20160101&#39;,periods&#x3D;6)</span><br><span class="line">df &#x3D; pd.DataFrame(np.random.randn(6,4),index&#x3D;dates,columns&#x3D;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;])</span><br></pre></td></tr></table></figure><p>DataFrame的方法：</p><ul><li>describe(), 得出一些统计值</li><li>head(), 获取前5个数据</li><li>hist(), 绘制柱状图</li><li>reindex(), 重新排列</li><li>isnull(), 判断是否有缺失数据<code>NaN</code></li><li>…</li></ul><p>这里插入一些关于将数据绘制成图形的使用。<code>matplotlib</code>是Python中用的非常广的绘图库，windows平台可以通过下面命令来安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install matplotlib</span><br></pre></td></tr></table></figure><p>在代码中通过import将其导入，进行使用。</p><p>例程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"># 导入matplot pyplot库</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"># 随机生成1000个数据，并有4列，列标签为‘A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;</span><br><span class="line">data &#x3D; pd.DataFrame(np.random.randn(100,4),</span><br><span class="line">index&#x3D;np.arange(100),</span><br><span class="line">columns&#x3D;list(&quot;ABCD&quot;))</span><br><span class="line"># 打印前5行数据</span><br><span class="line">print(data.head())</span><br><span class="line"></span><br><span class="line"># pandas 数据可以直接观看其可视化形式，线性图。</span><br><span class="line">data.plot()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"># 绘制点图</span><br><span class="line">ax&#x3D;data.plot.scatter(x&#x3D;&#39;A&#39;,y&#x3D;&#39;B&#39;,color&#x3D;&#39;DarkBlue&#39;,label&#x3D;&#39;Class A&#39;)</span><br><span class="line"></span><br><span class="line"># 通过下面这条语句可以将ax的图形与下面的图形合并一起绘制</span><br><span class="line"># data.plot.scatter(x&#x3D;&#39;C&#39;,y&#x3D;&#39;D&#39;,color&#x3D;&#39;DarkGreen&#39;,label&#x3D;&#39;Class B&#39;,ax&#x3D;ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>可能不是很详尽，但是足以入门，往后有使用还是要借助网络搜索。</p><p>[^1]: <a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html">Numpy User Guide</a><br>[^2]: <a href="https://morvanzhou.github.io/tutorials/data-manipulation/np-pd/2-1-np-attributes/">莫烦Python</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Numpy 和 Pandas[^1]是科学运算当中最重要的两个模块，在数据分析，机器学习领域不可或缺。其特点是运算速度快和消耗的资源少。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://trumming.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python元组列表和字典</title>
    <link href="https://trumming.github.io/Python/Python%E5%85%83%E7%BB%84%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8%20.html"/>
    <id>https://trumming.github.io/Python/Python%E5%85%83%E7%BB%84%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8%20.html</id>
    <published>2018-01-14T12:27:02.000Z</published>
    <updated>2020-12-20T15:50:05.854Z</updated>
    
    <content type="html"><![CDATA[<p>一边总结Python知识，一边学习掌握Markdown语法，很赞。</p><a id="more"></a><h1 id="元组和列表的共同点"><a href="#元组和列表的共同点" class="headerlink" title="元组和列表的共同点"></a>元组和列表的共同点</h1><p>都是一串有顺序的数字。其元素都可以用于迭代，输出，运用和定位输出，有点类似C语言中的数组。</p><h2 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_tuple=(<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">b_tuple= <span class="number">7</span>,<span class="number">93</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 List"></a>列表 List</h2><p>定义一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个1x6的列表</span></span><br><span class="line">a_list=[<span class="number">12</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">78</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>定义一个多维列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个3x3的列表</span></span><br><span class="line">a_list_33=[[<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>],</span><br><span class="line">           [<span class="number">6</span>,<span class="number">78</span>,<span class="number">9</span>],</span><br><span class="line">           [<span class="number">7</span>,<span class="number">99</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><ol><li>添加<br>追加</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.append(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>  任意位置插入</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">1</span><span class="comment">##索引</span></span><br><span class="line">val = <span class="number">500</span><span class="comment">##插入的值</span></span><br><span class="line">a_list.insert(index,val)</span><br></pre></td></tr></table></figure><ol start="2"><li>移除<br>移除指定位置元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.remove(<span class="number">500</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这里只是会删除第一个500，也就是说从索引0位置开始顺序往下找，只删除第一个匹配的元素。</p></blockquote><ol start="3"><li><p>索引<br>指定特定位置的元素</p><ul><li>索引为0的元素，即第一个元素</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><ul><li>列表末尾的元素，即最后一个元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><ul><li>取子集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(a_list[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 显示列表a_list的从第0位 到 第2位 的所有项的值</span></span><br><span class="line">print(a_list[<span class="number">5</span>:])  <span class="comment"># 显示列表a_list的第5位及以后的所有项的值</span></span><br><span class="line">print(a_list[<span class="number">-3</span>:]) <span class="comment"># 显示列表a_list的倒数第3位及以后的所有项的</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>排序<br>列表自带sort()方法用于排序。例如：</p><ul><li>升序</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.sort()<span class="comment">#升序</span></span><br></pre></td></tr></table></figure><ul><li>降序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.sort(reverse=<span class="literal">True</span>)<span class="comment">#降序</span></span><br></pre></td></tr></table></figure><h2 id="用于迭代和定位"><a href="#用于迭代和定位" class="headerlink" title="用于迭代和定位"></a>用于迭代和定位</h2><p>元组和列表均可用于迭代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> dat <span class="keyword">in</span> b_tuple:</span><br><span class="line">print(dat)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dat <span class="keyword">in</span> a_list:</span><br><span class="line">print(dat)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(a_list)):</span><br><span class="line">print(<span class="string">&#x27;index=&#x27;</span>,index,<span class="string">&#x27;,value=&#x27;</span>,a_list[index])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(a_tuple)):</span><br><span class="line">print(<span class="string">&#x27;index=&#x27;</span>,index,<span class="string">&#x27;,value=&#x27;</span>,a_tuple[index])</span><br></pre></td></tr></table></figure><h1 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h1><p>在字典中存在<code>key</code>和<code>value</code>两种元素。每一个<code>key</code> 对应一个<code>value</code>，<code>key</code>是名字，而<code>value</code>是其对应的内容。在同一个字典类型的数据体中，每个元素的<code>key</code>和<code>value</code>数据类型可以不一致。与元组和列表相比，其存放是无序的。</p><h2 id="定义一个字典"><a href="#定义一个字典" class="headerlink" title="定义一个字典"></a>定义一个字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_dict=&#123;<span class="string">&#x27;apple&#x27;</span>:<span class="string">&#x27;iphone&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;car&#x27;</span>:<span class="string">&#x27;bmw&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="索引一个元素"><a href="#索引一个元素" class="headerlink" title="索引一个元素"></a>索引一个元素</h2><p>字典的元素是通过<code>key</code>来索引的，只要知道<code>key</code>值就能获取到内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(a_dict[<span class="string">&#x27;apple&#x27;</span>])<span class="comment"># 查找key为&#x27;apple&#x27;的内容</span></span><br><span class="line">print(a_dict[<span class="string">&#x27;pear&#x27;</span>])<span class="comment"># 查找key为&#x27;pear&#x27;的内容</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>元组和列表对于学过C语言的人来说，很容易理解也很容易掌握。元组就是一个基本数据组合，与C的数组基本一致。列表较元组的不同是，其有一些自带的方法，例如插入，追加元素，排序等。<br>这里对我来说字典是一个新接触的数据容器，之前有涉猎一些数据库的知识，所以学习掌握起来也觉得非常简单。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一边总结Python知识，一边学习掌握Markdown语法，很赞。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://trumming.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>元组列表和字典</title>
    <link href="https://trumming.github.io/Python/%E5%85%83%E7%BB%84%20%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8.html"/>
    <id>https://trumming.github.io/Python/%E5%85%83%E7%BB%84%20%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8.html</id>
    <published>2018-01-14T12:27:02.000Z</published>
    <updated>2020-10-15T14:51:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>一边总结Python知识，一边学习掌握Markdown语法，很赞。</p><a id="more"></a><h1 id="元组和列表的共同点"><a href="#元组和列表的共同点" class="headerlink" title="元组和列表的共同点"></a>元组和列表的共同点</h1><p>都是一串有顺序的数字。其元素都可以用于迭代，输出，运用和定位输出，有点类似C语言中的数组。</p><h2 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a_tuple=(<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">b_tuple= <span class="number">7</span>,<span class="number">93</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 List"></a>列表 List</h2><p>定义一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个1x6的列表</span></span><br><span class="line">a_list=[<span class="number">12</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">78</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>定义一个多维列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个3x3的列表</span></span><br><span class="line">a_list_33=[[<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>],</span><br><span class="line">           [<span class="number">6</span>,<span class="number">78</span>,<span class="number">9</span>],</span><br><span class="line">           [<span class="number">7</span>,<span class="number">99</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><ol><li><p>添加<br> 追加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.append(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>任意位置插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="number">1</span><span class="comment">##索引</span></span><br><span class="line">val = <span class="number">500</span><span class="comment">##插入的值</span></span><br><span class="line">a_list.insert(index,val)</span><br></pre></td></tr></table></figure></li><li><p>移除<br> 移除指定位置元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.remove(<span class="number">500</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这里只是会删除第一个500，也就是说从索引0位置开始顺序往下找，只删除第一个匹配的元素。</p></blockquote></li><li><p>索引<br> 指定特定位置的元素</p><ul><li>索引为0的元素，即第一个元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li>列表末尾的元素，即最后一个元素<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></li><li>取子集<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(a_list[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 显示列表a_list的从第0位 到 第2位 的所有项的值</span></span><br><span class="line">print(a_list[<span class="number">5</span>:])  <span class="comment"># 显示列表a_list的第5位及以后的所有项的值</span></span><br><span class="line">print(a_list[<span class="number">-3</span>:]) <span class="comment"># 显示列表a_list的倒数第3位及以后的所有项的</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>排序<br> 列表自带sort()方法用于排序。例如：</p><ul><li>升序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.sort()<span class="comment">#升序</span></span><br></pre></td></tr></table></figure></li><li>降序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.sort(reverse=<span class="literal">True</span>)<span class="comment">#降序</span></span><br></pre></td></tr></table></figure><h2 id="用于迭代和定位"><a href="#用于迭代和定位" class="headerlink" title="用于迭代和定位"></a>用于迭代和定位</h2>元组和列表均可用于迭代。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> dat <span class="keyword">in</span> b_tuple:</span><br><span class="line">print(dat)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dat <span class="keyword">in</span> a_list:</span><br><span class="line">print(dat)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(a_list)):</span><br><span class="line">print(<span class="string">&#x27;index=&#x27;</span>,index,<span class="string">&#x27;,value=&#x27;</span>,a_list[index])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(a_tuple)):</span><br><span class="line">print(<span class="string">&#x27;index=&#x27;</span>,index,<span class="string">&#x27;,value=&#x27;</span>,a_tuple[index])</span><br></pre></td></tr></table></figure><h1 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典 dict"></a>字典 dict</h1>在字典中存在<code>key</code>和<code>value</code>两种元素。每一个<code>key</code> 对应一个<code>value</code>，<code>key</code>是名字，而<code>value</code>是其对应的内容。在同一个字典类型的数据体中，每个元素的<code>key</code>和<code>value</code>数据类型可以不一致。与元组和列表相比，其存放是无序的。</li></ul></li></ol><h2 id="定义一个字典"><a href="#定义一个字典" class="headerlink" title="定义一个字典"></a>定义一个字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_dict=&#123;<span class="string">&#x27;apple&#x27;</span>:<span class="string">&#x27;iphone&#x27;</span>,<span class="string">&#x27;pear&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;car&#x27;</span>:<span class="string">&#x27;bmw&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="索引一个元素"><a href="#索引一个元素" class="headerlink" title="索引一个元素"></a>索引一个元素</h2><p>字典的元素是通过<code>key</code>来索引的，只要知道<code>key</code>值就能获取到内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(a_dict[<span class="string">&#x27;apple&#x27;</span>])<span class="comment"># 查找key为&#x27;apple&#x27;的内容</span></span><br><span class="line">print(a_dict[<span class="string">&#x27;pear&#x27;</span>])<span class="comment"># 查找key为&#x27;pear&#x27;的内容</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>元组和列表对于学过C语言的人来说，很容易理解也很容易掌握。元组就是一个基本数据组合，与C的数组基本一致。列表较元组的不同是，其有一些自带的方法，例如插入，追加元素，排序等。<br>这里对我来说字典是一个新接触的数据容器，之前有涉猎一些数据库的知识，所以学习掌握起来也觉得非常简单。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一边总结Python知识，一边学习掌握Markdown语法，很赞。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://trumming.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://trumming.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo和Github Page搭建个人静态博客</title>
    <link href="https://trumming.github.io/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%88%A9%E7%94%A8Hexo%E5%92%8CGithub%20Page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://trumming.github.io/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%88%A9%E7%94%A8Hexo%E5%92%8CGithub%20Page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html</id>
    <published>2018-01-08T12:27:02.000Z</published>
    <updated>2020-12-20T15:50:06.254Z</updated>
    
    <content type="html"><![CDATA[<p>通过Github Page搭建个人免费的静态博客，使用开源Hexo博客框架快速搭建博客，免去造轮子的工作，使得网络新手小白给自己搭建博客成为可能。</p><a id="more"></a><h1 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h1><ul><li>github 账号</li><li>Git</li><li>Node.js</li><li>Hexo</li><li>科学上网</li></ul><h2 id="github账号"><a href="#github账号" class="headerlink" title="github账号"></a>github账号</h2><p>在<a href="https://github.com/">github</a>上注册个人账号。并参考<a href="https://pages.github.com/">Github Page</a>上描述的简单步骤来创建博客的仓库。</p><blockquote><p>If the first part of the repository doesn’t exactly match your username, it won’t work, so make sure to get it right. 注意仓库的名字要与你的用户名一致，否则不能工作。</p></blockquote><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ul><li><p>Git<br>下载，安装Git，用于代码的托管</p></li><li><p>Node.js<br><a href="https://nodejs.org/">Node.js</a> 是<a href="https://hexo.io/">Hexo</a>的依赖，Hexo需要依赖Node.js来工作。根据推荐下载合适的版本安装即可。</p></li><li><p>Hexo<br>Hexo是一套开源的博客框架。安装好Git和Node.js之后，在Git Bash终端中输入以下命令进行安装。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nmp install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h1><ul><li><p>步骤</p><ul><li><a href="https://hexo.io/zh-cn/docs/setup.html">建站</a></li></ul><blockquote><p>通过以下指令来生成所需要的文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><ul><li><p>按照需要配置博客信息<br>在<strong>folder</strong>文件夹下生成的 ** _config.yml ** 是网站的 <a href="https://hexo.io/zh-cn/docs/configuration.html">配置</a> 信息，可以在此配置大部分的参数，比如对网站的标题，语言，主题等进行配置。</p></li><li><p>生成博客</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate </span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><ul><li>预览博客</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>如果以上步骤没有出现错误，则打开浏览器输入网址 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可预览博客</p><ul><li>部署博客<br>部署是将生成好的博客代码，传输到博客的服务器上，这里对应的是Github Page。首先，需要对** _config.yml **配置文件中的 deploy字段进行配置。Hexo支持三种形式的<a href="https://hexo.io/zh-cn/docs/deployment.html">部署</a>，通过工具，或者是将生成博客文件自行上传到博客的仓库里，Hexo生成的所有博客所需文件都存放在Public中。然后，再执行部署命令进行部署。</li></ul><blockquote><p>__Note: hexo的部署需要安装依赖包 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。 __<br>配置 _config.yml, 下面以使用Git工具为例</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="attr">message:</span></span><br></pre></td></tr></table></figure><blockquote><p>执行部署命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>到此，通过Hexo博客framework搭建个人静态博客到此算是成功一半了，因为这仅仅是把博客的一整个套路走完了，后面还会涉及到一些文章的新建，博客主题的设定，评论区的构成等等。</p></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这是我个人第一次在网络上搭建博客，将自己的搭建的过程简略的回忆和复述，以提高个人的学习以及写作能力，以此同时要是能供新手小白参考入门起到一定积极作用更佳。网络上大神无私的分享自己的搭建经验，引领我入门，在此谢过！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过Github Page搭建个人免费的静态博客，使用开源Hexo博客框架快速搭建博客，免去造轮子的工作，使得网络新手小白给自己搭建博客成为可能。&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://trumming.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://trumming.github.io/tags/Hexo/"/>
    
    <category term="next" scheme="https://trumming.github.io/tags/next/"/>
    
  </entry>
  
</feed>
